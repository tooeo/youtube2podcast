#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö YouTube –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import yt_dlp
import sys
import os
import xml.etree.ElementTree as ET
from datetime import datetime
import re
import requests
import socket
import hashlib
import time
import signal
from typing import List, Dict, Any

from config import Source, SourceType, Subscription, get_enabled_sources, get_enabled_subscriptions, get_source_by_name, config_manager


running = True

def signal_handler(signum, frame):
    global running
    print(f"\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    running = False


def get_file_hash(title: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç MD5 —Ö–µ—à –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    """
    return hashlib.md5(title.encode('utf-8')).hexdigest()


def check_video_availability(video_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –ø–æ ID
    
    Args:
        video_id: ID –≤–∏–¥–µ–æ –Ω–∞ YouTube
        
    Returns:
        True –µ—Å–ª–∏ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'ignoreerrors': True,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            result = ydl.extract_info(f"https://www.youtube.com/watch?v={video_id}", download=False)
            return result is not None
    except Exception as e:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        return False


def diagnose_network_issues():
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ YouTube
    """
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
    try:
        ip = socket.gethostbyname("www.youtube.com")
        print(f"‚úÖ DNS YouTube: {ip}")
    except Exception as e:
        print(f"‚ùå DNS YouTube: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    try:
        response = requests.get("https://www.youtube.com", timeout=10)
        print(f"‚úÖ HTTP YouTube: {response.status_code}")
    except Exception as e:
        print(f"‚ùå HTTP YouTube: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ yt-dlp –≤–µ—Ä—Å–∏–∏
    try:
        import yt_dlp
        print(f"‚úÖ yt-dlp –≤–µ—Ä—Å–∏—è: {yt_dlp.version.__version__}")
    except Exception as e:
        print(f"‚ùå yt-dlp –≤–µ—Ä—Å–∏—è: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    test_video_id = "dQw4w9WgXcQ"  # Rick Roll
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            video_url = f"https://www.youtube.com/watch?v={test_video_id}"
            info = ydl.extract_info(video_url, download=False)
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {info.get('title', 'Unknown')}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
    
    print("=" * 50)


def clean_filename(filename: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è URL
    """
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    cleaned = re.sub(r'[^\w\-_.]', '_', filename)
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    cleaned = re.sub(r'_+', '_', cleaned)
    return cleaned


def get_videos_from_source(source: Source) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª)
    
    Args:
        source: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
    """
    ydl_opts = {
        'quiet': True,
        'extract_flat': True,  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        'ignoreerrors': True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
            source_info = ydl.extract_info(source.url, download=False)
            
            if not source_info or 'entries' not in source_info:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {source.name}")
                return []
            
            videos = []
            for entry in source_info['entries']:
                if entry:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –ø—É—Å—Ç–∞—è
                    video_info = {
                        'title': entry.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'url': entry.get('url', ''),
                        'id': entry.get('id', ''),
                        'duration': entry.get('duration', 0),
                        'uploader': entry.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'view_count': entry.get('view_count', 0)
                    }
                    videos.append(video_info)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {source.name}")
            return videos
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source.name}: {e}")
        return []


def print_video_links(videos: List[Dict[str, Any]], source_name: str) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    Args:
        videos: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
        source_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    """
    if not videos:
        print(f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {source_name}")
        return
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ '{source_name}':\n")
    print("=" * 80)
    
    for i, video in enumerate(videos, 1):
        print(f"{i:2d}. {video['title']}")
        print(f"    –°—Å—ã–ª–∫–∞: https://www.youtube.com/watch?v={video['id']}")
        print(f"    –ê–≤—Ç–æ—Ä: {video['uploader']}")
        if video['duration']:
            minutes = video['duration'] // 60
            seconds = video['duration'] % 60
            print(f"    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes}:{seconds:02d}")
        if video['view_count']:
            print(f"    –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {video['view_count']:,}")
        else:
            print(f"    –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        print("-" * 80)


def download_latest_audio(videos: List[Dict[str, Any]], source: Source, subscription: Subscription) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    
    Args:
        videos: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        subscription: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    """
    if not videos:
        print(f"‚ùå –ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {source.name}")
        return {}
    
    # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ —Å—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N
    latest_video = None
    max_check = min(source.max_videos, len(videos))
    
    for i, video in enumerate(videos[:max_check]):
        print(f"–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ {i+1}: {video['title']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        if check_video_availability(video['id']):
            latest_video = video
            print(f"‚úÖ –í–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {video['title']}")
            break
        else:
            print(f"‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {video['title']}")
    
    if not latest_video:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {source.name}")
        return {}
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_dir = f"data/{subscription.name}"
    os.makedirs(subscription_dir, exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ MD5 —Ö–µ—à—É
    file_hash = get_file_hash(latest_video['title'])
    mp3_filename = f"{file_hash}.mp3"
    mp3_path = os.path.join(subscription_dir, mp3_filename)
    
    if os.path.exists(mp3_path):
        print(f"\n–ê—É–¥–∏–æ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {mp3_filename}")
        print(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –≤–∏–¥–µ–æ: {latest_video['title']}")
        return latest_video
    
    print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source.name}' (–ø–æ–¥–ø–∏—Å–∫–∞ '{subscription.name}'):")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {latest_video['title']}")
    print(f"ID: {latest_video['id']}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
    download_settings = config_manager.get_download_setting('format', 'bestaudio/best')
    audio_codec = config_manager.get_download_setting('audio_codec', 'mp3')
    audio_quality = config_manager.get_download_setting('audio_quality', '192')
    thumbnail_format = config_manager.get_download_setting('thumbnail_format', 'webp')
    write_subtitles = config_manager.get_download_setting('write_subtitles', False)
    write_automatic_subtitles = config_manager.get_download_setting('write_automatic_subtitles', False)
    
    ydl_opts = {
        'format': download_settings,
        'outtmpl': f'{subscription_dir}/{file_hash}.%(ext)s',  # –®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å MD5 —Ö–µ—à–µ–º
        'postprocessors': [
            {
                'key': 'FFmpegExtractAudio',  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
                'preferredcodec': audio_codec,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
                'preferredquality': audio_quality,  # –ö–∞—á–µ—Å—Ç–≤–æ
            },
            {
                'key': 'FFmpegThumbnailsConvertor',
                'format': thumbnail_format,
            }
        ],
        'writethumbnail': True,  # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É
        'writesubtitles': write_subtitles,  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
        'writeautomaticsub': write_automatic_subtitles,
        'ignoreerrors': True,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            video_url = f"https://www.youtube.com/watch?v={latest_video['id']}"
            print(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É: {video_url}")
            ydl.download([video_url])
            print(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–∞–ø–∫—É: {subscription_dir}")
            return latest_video
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source.name}': {e}")
        return {}


def create_or_update_rss(videos: List[Dict[str, Any]], source: Source, subscription: Subscription, latest_video: Dict[str, Any]) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç RSS —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∫–∞—Å—Ç–æ–≤
    
    Args:
        videos: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        subscription: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        latest_video: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ latest_video –Ω–µ –ø—É—Å—Ç–æ–π
    if not latest_video or latest_video == {}:
        print(f"‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è RSS –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ: {source.name}")
        return
        
    rss_file = f"data/{subscription.name}/podcast.rss"
    subscription_dir = f"data/{subscription.name}"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(subscription_dir, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RSS –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    rss_version = config_manager.get_rss_setting('version', '2.0')
    namespaces = config_manager.get_rss_setting('namespaces', {})
    default_language = config_manager.get_rss_setting('default_language', 'ru')
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç RSS
    rss = ET.Element("rss", version=rss_version)
    for ns_name, ns_url in namespaces.items():
        rss.set(f"xmlns:{ns_name}", ns_url)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª
    channel = ET.SubElement(rss, "channel")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
    title = ET.SubElement(channel, "title")
    title.text = subscription.title or f"{subscription.name.title()} - –ü–æ–¥–∫–∞—Å—Ç"
    
    description = ET.SubElement(channel, "description")
    description.text = subscription.description or f"–ü–æ–¥–∫–∞—Å—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.name}"
    
    language = ET.SubElement(channel, "language")
    language.text = "ru"
    
    # iTunes –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    itunes_author = ET.SubElement(channel, "itunes:author")
    itunes_author.text = subscription.author or subscription.name
    
    itunes_summary = ET.SubElement(channel, "itunes:summary")
    itunes_summary.text = subscription.description or f"–ü–æ–¥–∫–∞—Å—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.name}"
    
    itunes_category = ET.SubElement(channel, "itunes:category", text=subscription.category)
    
    itunes_image = ET.SubElement(channel, "itunes:image")
    itunes_image.set("href", f"data/{subscription.name}/{get_file_hash(latest_video['title'])}.webp")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
    downloaded_videos = []
    if os.path.exists(subscription_dir):
        for file in os.listdir(subscription_dir):
            if file.endswith('.mp3'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                file_hash = file.replace('.mp3', '')
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≤–∏–¥–µ–æ –≤ —Å–ø–∏—Å–∫–µ
                for video in videos:
                    if get_file_hash(video['title']) == file_hash:
                        downloaded_videos.append(video)
                        break
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    for video in downloaded_videos:
        item = ET.SubElement(channel, "item")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        item_title = ET.SubElement(item, "title")
        item_title.text = video['title']
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        item_description = ET.SubElement(item, "description")
        item_description.text = f"–≠–ø–∏–∑–æ–¥ –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.name}: {video['title']}"
        
        # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        pub_date = ET.SubElement(item, "pubDate")
        pub_date.text = datetime.now().strftime("%a, %d %b %Y %H:%M:%S +0000")
        
        # GUID
        guid = ET.SubElement(item, "guid")
        guid.text = f"https://www.youtube.com/watch?v={video['id']}"
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª
        enclosure = ET.SubElement(item, "enclosure")
        mp3_path = f"data/{subscription.name}/{get_file_hash(video['title'])}.mp3"
        enclosure.set("url", mp3_path)
        enclosure.set("type", "audio/mpeg")
        if os.path.exists(mp3_path):
            enclosure.set("length", str(os.path.getsize(mp3_path)))
        else:
            enclosure.set("length", "0")
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è iTunes
        if video['duration']:
            itunes_duration = ET.SubElement(item, "itunes:duration")
            hours = video['duration'] // 3600
            minutes = (video['duration'] % 3600) // 60
            seconds = video['duration'] % 60
            if hours > 0:
                duration_str = f"{hours}:{minutes:02d}:{seconds:02d}"
            else:
                duration_str = f"{minutes}:{seconds:02d}"
            itunes_duration.text = duration_str
        
        # –ê–≤—Ç–æ—Ä –¥–ª—è iTunes
        itunes_item_author = ET.SubElement(item, "itunes:author")
        itunes_item_author.text = video['uploader']
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º RSS —Ñ–∞–π–ª
    tree = ET.ElementTree(rss)
    ET.indent(tree, space="  ")
    tree.write(rss_file, encoding='utf-8', xml_declaration=True)
    
    print(f"RSS —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {rss_file}")
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(downloaded_videos)} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –≤ RSS")


def process_source(source: Source, subscription: Subscription) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        source: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        subscription: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source.name} (–ø–æ–¥–ø–∏—Å–∫–∞: {subscription.name})")
    print(f"üìã –¢–∏–ø: {source.source_type.value}")
    print(f"üîó URL: {source.url}")
    print("-" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        videos = get_videos_from_source(source)
        
        if not videos:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source.name}")
            return False
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        print_video_links(videos, source.name)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ
        latest_video = download_latest_audio(videos, source, subscription)
        
        # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º RSS —Ñ–∞–π–ª
        if latest_video and latest_video != {}:
            create_or_update_rss(videos, source, subscription, latest_video)
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è RSS –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source.name}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source.name}': {e}")
        return False


def main_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º
    """
    global running
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("üéôÔ∏è  YouTube2Podcast Multi-Source –∑–∞–≥—Ä—É–∑—á–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    print("‚è∞ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
    diagnose_network_issues()
    
    while running:
        try:
            print(f"\nüïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ó–∞–ø—É—Å–∫ –∏—Ç–µ—Ä–∞—Ü–∏–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            enabled_subscriptions = get_enabled_subscriptions()
            
            if not enabled_subscriptions:
                print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                break
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(enabled_subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
            total_success_count = 0
            total_sources_count = 0
            
            for subscription in enabled_subscriptions:
                print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {subscription.title}")
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {subscription.description}")
                print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ø–æ–¥–ø–∏—Å–∫–µ: {len(subscription.sources)}")
                print("-" * 50)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –ø–æ–¥–ø–∏—Å–∫–µ
                subscription_success_count = 0
                enabled_sources = [source for source in subscription.sources if source.enabled]
                
                for source in enabled_sources:
                    if process_source(source, subscription):
                        subscription_success_count += 1
                    total_sources_count += 1
                    print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                
                total_success_count += subscription_success_count
                print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '{subscription.title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {subscription_success_count}/{len(enabled_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            
            print(f"‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üìä –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_success_count}/{total_sources_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            
            if running:
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
                # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
                for i in range(600):
                    if not running:
                        break
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            running = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: {e}")
            if running:
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(600)
    
    print("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
    diagnose_network_issues()
    
    print("üéôÔ∏è  YouTube2Podcast Multi-Source - –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    enabled_subscriptions = get_enabled_subscriptions()
    
    if not enabled_subscriptions:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(enabled_subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
    total_success_count = 0
    total_sources_count = 0
    
    for subscription in enabled_subscriptions:
        print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {subscription.title}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {subscription.description}")
        print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ø–æ–¥–ø–∏—Å–∫–µ: {len(subscription.sources)}")
        print("-" * 50)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_success_count = 0
        enabled_sources = [source for source in subscription.sources if source.enabled]
        
        for source in enabled_sources:
            if process_source(source, subscription):
                subscription_success_count += 1
            total_sources_count += 1
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        
        total_success_count += subscription_success_count
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '{subscription.title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {subscription_success_count}/{len(enabled_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    
    print(f"\nüìä –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {total_success_count}/{total_sources_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--loop":
        main_loop()
    else:
        main()
