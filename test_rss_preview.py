#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RSS —Å –ø—Ä–µ–≤—å—é
"""

import sys
import os
import xml.etree.ElementTree as ET

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config import Source, SourceType, Subscription
from multi_downloader import create_or_update_rss, get_file_hash


def test_rss_with_preview():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ RSS —Å –ø—Ä–µ–≤—å—é"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RSS —Å –ø—Ä–µ–≤—å—é")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    test_source = Source(
        name="test_source",
        url="https://www.youtube.com/@varlamov",
        source_type=SourceType.CHANNEL,
        enabled=True,
        check_interval=10,
        max_videos=3,
        custom_title="Test Source",
        custom_description="Test Description",
        category="Test",
        author="test_author"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    test_subscription = Subscription(
        name="test_subscription",
        title="Test Subscription",
        description="Test subscription for RSS preview testing",
        enabled=True,
        category="Test",
        author="test_author",
        sources=[test_source]
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ
    test_videos = [
        {
            'title': 'Test Video 1 - Introduction',
            'id': 'test123',
            'uploader': 'Test Channel',
            'duration': 1800,  # 30 –º–∏–Ω—É—Ç
            'upload_date': '20241201'
        },
        {
            'title': 'Test Video 2 - Main Content',
            'id': 'test456',
            'uploader': 'Test Channel',
            'duration': 2400,  # 40 –º–∏–Ω—É—Ç
            'upload_date': '20241202'
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    subscription_dir = f"data/{test_subscription.name}"
    os.makedirs(subscription_dir, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ MP3 —Ñ–∞–π–ª—ã
    for video in test_videos:
        file_hash = get_file_hash(video['title'])
        mp3_path = f"{subscription_dir}/{file_hash}.mp3"
        webp_path = f"{subscription_dir}/{file_hash}.webp"
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with open(mp3_path, 'w') as f:
            f.write("test mp3 content")
        
        with open(webp_path, 'w') as f:
            f.write("test webp content")
        
        print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {mp3_path}")
        print(f"üñºÔ∏è –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–≤—å—é: {webp_path}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ RSS
    print(f"\nüìã –°–æ–∑–¥–∞–Ω–∏–µ RSS –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {test_subscription.name}")
    create_or_update_rss(test_videos, test_source, test_subscription, test_videos[0])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π RSS —Ñ–∞–π–ª
    rss_file = f"{subscription_dir}/podcast.rss"
    if os.path.exists(rss_file):
        print(f"‚úÖ RSS —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {rss_file}")
        
        # –ü–∞—Ä—Å–∏–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º RSS
        tree = ET.parse(rss_file)
        root = tree.getroot()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º namespace –¥–ª—è iTunes
        ET.register_namespace('itunes', 'http://www.itunes.com/dtds/podcast-1.0.dtd')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞
        channel = root.find('channel')
        if channel is not None:
            itunes_image = channel.find('{http://www.itunes.com/dtds/podcast-1.0.dtd}image')
            if itunes_image is not None:
                print(f"üñºÔ∏è –ü—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞: {itunes_image.get('href')}")
            else:
                print("‚ùå –ü—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—å—é —ç–ø–∏–∑–æ–¥–æ–≤
        items = root.findall('channel/item')
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ø–∏–∑–æ–¥–æ–≤ –≤ RSS")
        
        for i, item in enumerate(items, 1):
            title = item.find('title')
            itunes_image = item.find('{http://www.itunes.com/dtds/podcast-1.0.dtd}image')
            
            print(f"  {i}. {title.text if title is not None else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
            if itunes_image is not None:
                print(f"     üñºÔ∏è –ü—Ä–µ–≤—å—é: {itunes_image.get('href')}")
            else:
                print(f"     ‚ùå –ü—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        print(f"\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
        for item in items:
            enclosure = item.find('enclosure')
            if enclosure is not None:
                print(f"  üìª {enclosure.get('url')}")
        
    else:
        print(f"‚ùå RSS —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {rss_file}")


def validate_rss_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É RSS —Ñ–∞–π–ª–∞"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã RSS —Ñ–∞–π–ª–∞")
    print("=" * 60)
    
    subscription_dir = "data/test_subscription"
    rss_file = f"{subscription_dir}/podcast.rss"
    
    if not os.path.exists(rss_file):
        print(f"‚ùå RSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {rss_file}")
        return
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º namespace –¥–ª—è iTunes
        ET.register_namespace('itunes', 'http://www.itunes.com/dtds/podcast-1.0.dtd')
        
        tree = ET.parse(rss_file)
        root = tree.getroot()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        required_elements = [
            'channel/title',
            'channel/description',
            'channel/language',
            'channel/item'
        ]
        
        print("‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã RSS:")
        for element_path in required_elements:
            element = root.find(element_path)
            if element is not None:
                print(f"  ‚úÖ {element_path}: {element.text[:50]}...")
            else:
                print(f"  ‚ùå {element_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º iTunes —ç–ª–µ–º–µ–Ω—Ç—ã
        itunes_elements = [
            'channel/{http://www.itunes.com/dtds/podcast-1.0.dtd}author',
            'channel/{http://www.itunes.com/dtds/podcast-1.0.dtd}summary',
            'channel/{http://www.itunes.com/dtds/podcast-1.0.dtd}category',
            'channel/{http://www.itunes.com/dtds/podcast-1.0.dtd}image',
            'channel/{http://www.itunes.com/dtds/podcast-1.0.dtd}explicit',
            'channel/{http://www.itunes.com/dtds/podcast-1.0.dtd}type'
        ]
        
        print("\n‚úÖ iTunes —ç–ª–µ–º–µ–Ω—Ç—ã:")
        for element_path in itunes_elements:
            element = root.find(element_path)
            if element is not None:
                print(f"  ‚úÖ {element_path.split('}')[-1]}: {element.text}")
            else:
                print(f"  ‚ùå {element_path.split('}')[-1]}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —ç–ø–∏–∑–æ–¥–æ–≤
        items = root.findall('channel/item')
        if items:
            first_item = items[0]
            item_elements = [
                'title',
                'description',
                'enclosure',
                '{http://www.itunes.com/dtds/podcast-1.0.dtd}duration',
                '{http://www.itunes.com/dtds/podcast-1.0.dtd}author',
                '{http://www.itunes.com/dtds/podcast-1.0.dtd}summary',
                '{http://www.itunes.com/dtds/podcast-1.0.dtd}category',
                '{http://www.itunes.com/dtds/podcast-1.0.dtd}image'
            ]
            
            print(f"\n‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã —ç–ø–∏–∑–æ–¥–∞:")
            for element_path in item_elements:
                element = first_item.find(element_path)
                if element is not None:
                    if element_path == 'enclosure':
                        print(f"  ‚úÖ {element_path}: {element.get('url')}")
                    else:
                        print(f"  ‚úÖ {element_path}: {element.text[:50]}...")
                else:
                    print(f"  ‚ùå {element_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except ET.ParseError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS: {e}")


if __name__ == "__main__":
    test_rss_with_preview()
    validate_rss_structure()
