#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è YouTube2Podcast
"""

import os
import yaml
from typing import List, Dict, Any, Union, Optional
from dataclasses import dataclass
from enum import Enum
from pathlib import Path


class SourceType(Enum):
    """–¢–∏–ø—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    PLAYLIST = "playlist"
    CHANNEL = "channel"


@dataclass
class Source:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    name: str
    url: str
    source_type: SourceType
    enabled: bool = True
    check_interval: int = 10  # –º–∏–Ω—É—Ç—ã
    max_videos: int = 5  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    custom_title: str = None  # –∫–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è RSS
    custom_description: str = None  # –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è RSS
    category: str = "News & Politics"  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è iTunes
    author: str = None  # –∞–≤—Ç–æ—Ä


@dataclass
class Subscription:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    name: str
    title: str
    description: str
    enabled: bool = True
    category: str = "News & Politics"
    author: str = None
    sources: List[Source] = None


@dataclass
class Config:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    global_settings: Dict[str, Any]
    subscriptions: List[Subscription]
    download_settings: Dict[str, Any]
    rss_settings: Dict[str, Any]
    logging_settings: Dict[str, Any]
    diagnostics_settings: Dict[str, Any]


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config_file: str = "config.yaml"):
        self.config_file = config_file
        self.config = None
        self._load_config()
    
    def _load_config(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                yaml_data = yaml.safe_load(f)
            
            # –ü–∞—Ä—Å–∏–º –ø–æ–¥–ø–∏—Å–∫–∏
            subscriptions = []
            for sub_name, sub_data in yaml_data.get('subscriptions', {}).items():
                # –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –ø–æ–¥–ø–∏—Å–∫–µ
                sources = []
                for source_name, source_data in sub_data.get('sources', {}).items():
                    source_type = SourceType(source_data.get('type', 'channel'))
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    global_settings = yaml_data.get('global', {})
                    check_interval = source_data.get('check_interval', global_settings.get('check_interval', 10))
                    max_videos = source_data.get('max_videos', global_settings.get('max_videos', 5))
                    
                    source = Source(
                        name=source_name,
                        url=source_data['url'],
                        source_type=source_type,
                        enabled=source_data.get('enabled', True),
                        check_interval=check_interval,
                        max_videos=max_videos,
                        custom_title=source_data.get('custom_title'),
                        custom_description=source_data.get('custom_description'),
                        category=source_data.get('category', sub_data.get('category', 'News & Politics')),
                        author=source_data.get('author', sub_data.get('author'))
                    )
                    sources.append(source)
                
                subscription = Subscription(
                    name=sub_name,
                    title=sub_data.get('title', sub_name.title()),
                    description=sub_data.get('description', ''),
                    enabled=sub_data.get('enabled', True),
                    category=sub_data.get('category', 'News & Politics'),
                    author=sub_data.get('author'),
                    sources=sources
                )
                subscriptions.append(subscription)
            
            self.config = Config(
                global_settings=yaml_data.get('global', {}),
                subscriptions=subscriptions,
                download_settings=yaml_data.get('download', {}),
                rss_settings=yaml_data.get('rss', {}),
                logging_settings=yaml_data.get('logging', {}),
                diagnostics_settings=yaml_data.get('diagnostics', {})
            )
            
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ config.yaml.dist –≤ config.yaml –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã:")
            print("   cp config.yaml.dist config.yaml")
            self._create_default_config()
        except yaml.YAMLError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
            self._create_default_config()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self._create_default_config()
    
    def _create_default_config(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        
        default_sources = [
            Source(
                name="che_proishodit",
                url="https://www.youtube.com/playlist?list=PLceIIEa--FBIIrCD1GIp7ndizRDCwcJgf",
                source_type=SourceType.PLAYLIST,
                custom_title="–ß—ë –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç - –ü–æ–¥–∫–∞—Å—Ç",
                custom_description="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –º–∏—Ä–µ"
            ),
            Source(
                name="varlamov",
                url="https://www.youtube.com/@varlamov",
                source_type=SourceType.CHANNEL,
                custom_title="Varlamov - –ü–æ–¥–∫–∞—Å—Ç",
                custom_description="–ü–æ–¥–∫–∞—Å—Ç —Å –∫–∞–Ω–∞–ª–∞ Varlamov"
            )
        ]
        
        default_subscription = Subscription(
            name="news_politics",
            title="–ù–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞",
            description="–ü–æ–¥–∫–∞—Å—Ç—ã –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö",
            sources=default_sources
        )
        
        self.config = Config(
            global_settings={'check_interval': 10, 'max_videos': 5, 'language': 'ru'},
            subscriptions=[default_subscription],
            download_settings={'format': 'bestaudio/best', 'audio_codec': 'mp3'},
            rss_settings={'version': '2.0'},
            logging_settings={'level': 'INFO'},
            diagnostics_settings={'enabled': True}
        )
    
    def save_config(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ YAML —Ñ–∞–π–ª"""
        try:
            yaml_data = {
                'global': self.config.global_settings,
                'subscriptions': {},
                'download': self.config.download_settings,
                'rss': self.config.rss_settings,
                'logging': self.config.logging_settings,
                'diagnostics': self.config.diagnostics_settings
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            for subscription in self.config.subscriptions:
                yaml_data['subscriptions'][subscription.name] = {
                    'enabled': subscription.enabled,
                    'title': subscription.title,
                    'description': subscription.description,
                    'category': subscription.category,
                    'author': subscription.author,
                    'sources': {}
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –ø–æ–¥–ø–∏—Å–∫–µ
                for source in subscription.sources:
                    yaml_data['subscriptions'][subscription.name]['sources'][source.name] = {
                        'enabled': source.enabled,
                        'type': source.source_type.value,
                        'url': source.url,
                        'custom_title': source.custom_title,
                        'custom_description': source.custom_description,
                        'check_interval': source.check_interval,
                        'max_videos': source.max_videos,
                        'category': source.category,
                        'author': source.author
                    }
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                yaml.dump(yaml_data, f, default_flow_style=False, allow_unicode=True, indent=2)
            
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_file}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def get_enabled_subscriptions(self) -> List[Subscription]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        return [sub for sub in self.config.subscriptions if sub.enabled]

    def get_subscription_by_name(self, name: str) -> Subscription:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∏–º–µ–Ω–∏"""
        for subscription in self.config.subscriptions:
            if subscription.name == name:
                return subscription
        raise ValueError(f"–ü–æ–¥–ø–∏—Å–∫–∞ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def get_all_enabled_sources(self) -> List[Source]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        sources = []
        for subscription in self.get_enabled_subscriptions():
            sources.extend([source for source in subscription.sources if source.enabled])
        return sources

    def get_source_by_name(self, name: str) -> Source:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        for subscription in self.config.subscriptions:
            for source in subscription.sources:
                if source.name == name:
                    return source
        raise ValueError(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def add_subscription(self, subscription: Subscription) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        for existing_sub in self.config.subscriptions:
            if existing_sub.name == subscription.name:
                raise ValueError(f"–ü–æ–¥–ø–∏—Å–∫–∞ '{subscription.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        self.config.subscriptions.append(subscription)
        self.save_config()

    def remove_subscription(self, name: str) -> None:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∏–º–µ–Ω–∏"""
        self.config.subscriptions = [sub for sub in self.config.subscriptions if sub.name != name]
        self.save_config()

    def enable_subscription(self, name: str) -> None:
        """–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        subscription = self.get_subscription_by_name(name)
        subscription.enabled = True
        self.save_config()

    def disable_subscription(self, name: str) -> None:
        """–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        subscription = self.get_subscription_by_name(name)
        subscription.enabled = False
        self.save_config()

    def list_subscriptions(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º"""
        result = []
        for subscription in self.config.subscriptions:
            enabled_sources = [source for source in subscription.sources if source.enabled]
            result.append({
                'name': subscription.name,
                'title': subscription.title,
                'description': subscription.description,
                'enabled': subscription.enabled,
                'category': subscription.category,
                'author': subscription.author,
                'sources_count': len(subscription.sources),
                'enabled_sources_count': len(enabled_sources)
            })
        return result

    def list_sources(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        result = []
        for subscription in self.config.subscriptions:
            for source in subscription.sources:
                result.append({
                    'name': source.name,
                    'subscription': subscription.name,
                    'url': source.url,
                    'type': source.source_type.value,
                    'enabled': source.enabled and subscription.enabled,
                    'check_interval': source.check_interval,
                    'max_videos': source.max_videos,
                    'custom_title': source.custom_title,
                    'custom_description': source.custom_description,
                    'category': source.category,
                    'author': source.author
                })
        return result
    
    def get_global_setting(self, key: str, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        return self.config.global_settings.get(key, default)
    
    def get_download_setting(self, key: str, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–≥—Ä—É–∑–∫–∏"""
        return self.config.download_settings.get(key, default)
    
    def get_rss_setting(self, key: str, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É RSS"""
        return self.config.rss_settings.get(key, default)
    
    def get_base_url(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –¥–ª—è RSS —Å—Å—ã–ª–æ–∫"""
        return self.config.global_settings.get('base_url', 'http://localhost')


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_manager = ConfigManager()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_enabled_sources() -> List[Source]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    return config_manager.get_all_enabled_sources()


def get_source_by_name(name: str) -> Source:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏"""
    return config_manager.get_source_by_name(name)


def add_source(name: str, url: str, source_type: SourceType, **kwargs) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    source = Source(name=name, url=url, source_type=source_type, **kwargs)
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    enabled_subs = config_manager.get_enabled_subscriptions()
    if enabled_subs:
        enabled_subs[0].sources.append(source)
        config_manager.save_config()
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        subscription = Subscription(
            name="default",
            title="Default Subscription",
            description="Default subscription",
            sources=[source]
        )
        config_manager.add_subscription(subscription)


def remove_source(name: str) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    for subscription in config_manager.config.subscriptions:
        subscription.sources = [s for s in subscription.sources if s.name != name]
    config_manager.save_config()


def enable_source(name: str) -> None:
    """–í–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"""
    source = config_manager.get_source_by_name(name)
    source.enabled = True
    config_manager.save_config()


def disable_source(name: str) -> None:
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"""
    source = config_manager.get_source_by_name(name)
    source.enabled = False
    config_manager.save_config()


def list_sources() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º"""
    return config_manager.list_sources()


# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
def get_enabled_subscriptions() -> List[Subscription]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    return config_manager.get_enabled_subscriptions()


def get_subscription_by_name(name: str) -> Subscription:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∏–º–µ–Ω–∏"""
    return config_manager.get_subscription_by_name(name)


def add_subscription(name: str, title: str, description: str, **kwargs) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    subscription = Subscription(name=name, title=title, description=description, **kwargs)
    config_manager.add_subscription(subscription)


def remove_subscription(name: str) -> None:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∏–º–µ–Ω–∏"""
    config_manager.remove_subscription(name)


def enable_subscription(name: str) -> None:
    """–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    config_manager.enable_subscription(name)


def disable_subscription(name: str) -> None:
    """–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    config_manager.disable_subscription(name)


def list_subscriptions() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º"""
    return config_manager.list_subscriptions()
