#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ dry-run —Ä–µ–∂–∏–º–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config import Source, SourceType, Subscription
from multi_downloader import dry_run_analysis


def test_dry_run_mode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º dry-run —Ä–µ–∂–∏–º"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dry-run —Ä–µ–∂–∏–º–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–∫–∞–Ω–∞–ª)
    test_source = Source(
        name="test_channel",
        url="https://www.youtube.com/@varlamov",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª
        source_type=SourceType.CHANNEL,
        enabled=True,
        check_interval=10,
        max_videos=3,  # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
        custom_title="Test Channel",
        custom_description="Test Description",
        category="Test",
        author="test_author"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    test_subscription = Subscription(
        name="test_subscription",
        title="Test Subscription",
        description="Test Description",
        enabled=True,
        category="Test",
        author="test_author",
        sources=[test_source]
    )
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {test_source.name}")
    print(f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: {test_subscription.name}")
    print(f"üîó URL: {test_source.url}")
    print(f"üìä –ú–∞–∫—Å–∏–º—É–º –≤–∏–¥–µ–æ: {test_source.max_videos}")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º dry-run –∞–Ω–∞–ª–∏–∑
    analysis_result = dry_run_analysis(test_source, test_subscription)
    
    if analysis_result:
        print(f"\n‚úÖ Dry-run –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {analysis_result.get('total_videos_found', 0)}")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤–∏–¥–µ–æ: {analysis_result.get('videos_to_check', 0)}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ: {len(analysis_result.get('available_videos', []))}")
        print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ: {len(analysis_result.get('unavailable_videos', []))}")
        
        if analysis_result.get('will_download'):
            print(f"   üéØ –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {analysis_result['will_download']['title']}")
            print(f"   üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {analysis_result.get('file_exists', False)}")
        else:
            print(f"   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
    else:
        print(f"\n‚ùå Dry-run –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")


def test_dry_run_playlist():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º dry-run —Ä–µ–∂–∏–º —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dry-run —Ä–µ–∂–∏–º–∞ —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–ø–ª–µ–π–ª–∏—Å—Ç)
    test_source = Source(
        name="test_playlist",
        url="https://www.youtube.com/playlist?list=PLceIIEa--FBIIrCD1GIp7ndizRDCwcJgf",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
        source_type=SourceType.PLAYLIST,
        enabled=True,
        check_interval=10,
        max_videos=3,  # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
        custom_title="Test Playlist",
        custom_description="Test Description",
        category="Test",
        author="test_author"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    test_subscription = Subscription(
        name="test_subscription",
        title="Test Subscription",
        description="Test Description",
        enabled=True,
        category="Test",
        author="test_author",
        sources=[test_source]
    )
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {test_source.name}")
    print(f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: {test_subscription.name}")
    print(f"üîó URL: {test_source.url}")
    print(f"üìä –ú–∞–∫—Å–∏–º—É–º –≤–∏–¥–µ–æ: {test_source.max_videos}")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º dry-run –∞–Ω–∞–ª–∏–∑
    analysis_result = dry_run_analysis(test_source, test_subscription)
    
    if analysis_result:
        print(f"\n‚úÖ Dry-run –∞–Ω–∞–ª–∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {analysis_result.get('total_videos_found', 0)}")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤–∏–¥–µ–æ: {analysis_result.get('videos_to_check', 0)}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ: {len(analysis_result.get('available_videos', []))}")
        print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ: {len(analysis_result.get('unavailable_videos', []))}")
        
        if analysis_result.get('will_download'):
            print(f"   üéØ –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {analysis_result['will_download']['title']}")
            print(f"   üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {analysis_result.get('file_exists', False)}")
        else:
            print(f"   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
    else:
        print(f"\n‚ùå Dry-run –∞–Ω–∞–ª–∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è")


if __name__ == "__main__":
    test_dry_run_mode()
    test_dry_run_playlist()
